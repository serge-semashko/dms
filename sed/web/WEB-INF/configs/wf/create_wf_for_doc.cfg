wf/create_wf_for_doc

[comments]
descr=S: Создать рабочее, НЕ АКТИВНОЕ workflow для документа. Удаляет старые WF документа, если они есть.

input=doc_id - ID документа
output=Копирование шаблона из wf_templates в wf, заполнение полей на основе данных документа (атрибуты, персоны на этапах)
parents=docs/doc_edit.cfg
childs=wf/set_wf_params
author=Куняев
[end]

[parameters]
request_name=S:создание wf для документа #doc_id#
LOG=ON
[end]


[report]
    $GET_DATA [get doc info]
    $SET_PARAMETERS DOC_DATA_TABLE=d_data_#DOC_TYPE_ID#;  ??!DOC_DATA_TABLE
    ======= начало транзакции для всего этого запроса (создание рабочего workflow) ======??
    $LOG <hr>
    $GET_DATA [start transaction]  
    $GET_DATA [delete existing wf] ??OLD_WF_ID&!ERROR
    $CALL_SERVICE c=wf/copy_wf_template ??!ERROR

    $CALL_SERVICE c=wf/set_wf_users ??!ERROR

    $LOG <hr>OK! Workflow for doc #doc_id# created.<br>  ??!ERROR
    $LOG <hr>Ошибка создания Workflow for doc #doc_id#:<br>#ERROR#  ??ERROR
    $LOG_ERROR #ERROR#  ??ERROR
    $SET_PARAMETERS ERROR=;

    $GET_DATA [commit] 
    $LOG <hr>
[end]


==============================================================
==============================================================
==============================================================
[start transaction]
    lock tables wf_list write, wf write, wf_history write, wf_events write, wf_events_notifications write;
    START TRANSACTION;
[end]

[commit]
    COMMIT;   ??!ERROR
    $INCLUDE [do rollback] ??ERROR
    unlock tables;
[end]

[do rollback]
    ROLLBACK; 
    select max(id)+1 as NEXT_ID from wf_list;
    ALTER TABLE wf_list AUTO_INCREMENT = #NEXT_ID# ??NEXT_ID
    ;
    select max(id)+1 as NEXT_ID from wf;
    ALTER TABLE wf AUTO_INCREMENT = #NEXT_ID# ??NEXT_ID
    ;
    select max(id)+1 as NEXT_ID from wf_history;
    ALTER TABLE wf_history AUTO_INCREMENT = #NEXT_ID#  ??NEXT_ID
    ;
[end]

[get doc info]
    select type_id as "DOC_TYPE_ID", creator_id, comment from d_list where id=#doc_id#
    ;
    select id as "OLD_WF_ID" from wf_list where doc_id=#doc_id#
    ;
[end]


[delete existing wf]
    delete /* delete workflow */ from wf where wf_id in (select id from wf_list where doc_id=#doc_id#)
    ;
    delete /* delete workflow from wf_list */ from wf_list where doc_id=#doc_id#
    ;
    update /* set doc status=draft */ d_list set status=0  where id=#doc_id#
    ;
    insert /* register delete OLD WF in history */ 
    into wf_history (dat, wf_id, doc_id, user_id, user_fio, user_posts, user_role, step, result, processed, client_ip, login_id)
    values (now(), #OLD_WF_ID#, #doc_id#, #USER_ID#, '#user_FIO#', '#user_posts#', '#user_roles#', 0, 'Workflow удалена', now(), '#ClientIP#', '#USER_ID#')
    ;
[end]

