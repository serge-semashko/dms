so/create.cfg


[comments]
descr=S: Скопировать из шаблона дерево структурированного объекта.

input=doc_id - ID документа, so_type - тип СО, [tree_pid] - ID родительского раздела в so_tree (при рекурсивном вызове, def.=0 - корень)
output=Копирование шаблона СО из so_tree в so_data
parents=
childs=
testURL=?c=so/create&doc_id=32&so_type=1
author=Куняев
[end]

[description]
Копирует в so_data из so_tree шаблон структурированного объекта заданного типа для заданного документа. <br>
Если в so_data уже существуют СО заданного типа для этого документа, то они удаляются.
<ul>
<li>Поиск в so_data ID заданного раздела, занесенного туда ранее. Если нет такого - считаем верхним уровнем.</li>
<li>Запрос на выборку из so_tree всех подразделов заданного раздела.</li>
<li>Копирование очередной полученной записи в so_data с добавлением полей: pid, doc_id, tree_id</li>
<li>Рекурсивный вызов - копирование подразделов занесенного раздела </li>
<li><b>Поле so_id (ID всего СО) пока не задействовано!</b></li>
</ul>
Таким образом, копируются все подразделы начиная с корневого.
[end]


[parameters]
service=dubna.walt.service.TableServiceSpecial
request_name=S:СО для документа #doc_id#
tableCfg=table_no
LOG=ON
[end]


[report header]
$SET_PARAMETERS AR_W=Y;
$CALL_SERVICE c=sys/getARUD; ??!AR_W=Y
$INCLUDE [OK report header]  ??AR_W=Y
$CALL_SERVICE c=sys/log_doc_access; doc_id=#doc_id#; access_type=3; rejected=1;   ??!AR_W=Y
[end]


[OK report header]
$GET_DATA [get data pid] ??tree_pid
$GET_DATA [get SO version] ??!tree_pid
$SET_PARAMETERS tree_pid=0; ??!tree_pid
$SET_PARAMETERS DATA_PID=0; ??!DATA_PID
[end]


[item]
$GET_DATA [add SO block]
$STORE_PARAMETERS 
$CALL_SERVICE c=so/create; tree_pid=#tree_id#;  ??!ERROR
$RESTORE_PARAMETERS
[end]

[report footer]
[end]

==============================================================
==============================================================
==============================================================

[get SO version]
select max(version) as version from so_types where id=#so_type# and start_date<now()
;
delete from so_data where doc_id=#doc_id# and so_type=#so_type#
[end]


[get data pid]
select ifnull(id, 0) as "DATA_PID" from so_data where doc_id=#doc_id# and so_type=#so_type# and tree_id=#tree_pid# 
[end]

[add SO block]
insert into so_data(pid, so_id, doc_id, tree_id, so_type, num, level, title, text, editable, comment, modif_date, modifier_id)
values(#DATA_PID#, -1, #doc_id#, #tree_id#, #so_type#, #num#, #level#, '#title#', '#text#', #editable#, '#comment#', now(), 0)
[end]

[SQL]
$INCLUDE [SQL_]  ??!ERROR
[end]

[SQL_]
select id as "tree_id", num, level, title, text, editable, comment
from so_tree
where pid=#tree_pid#
order by num
;
[end]



