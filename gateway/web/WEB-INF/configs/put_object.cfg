put_object.cfg

[comments]
descr=S: Прием объекта из источника, запись его в вых. очередь, выставление флага "время обновления очереди"
input=
output=
parents=
childs=put_object_to_queue.cfg
test_URL=
author=Куняев
[end]

[description]
Обработка команды PutObject put_object.cfg
<ol>
<li>Сброс ошибки «Неверная команда» [preSQLs]
<li>Парсит JSON (параметр запроса Object), проверка синтаксиса (ServiceReceiveDoc.start()).</li>
<li>Замена в JSON экранированных кавычек \” на ``</li>
<li>Прием объекта [process object]: 
  <ul>
    <li>Проверка содержания некоторых типов объектов и фильтрация не нужных [checkObjectContent]</li>
    <li>проверка наличия параметров ClientObjectID, ObjectType, Object, </li>
    <li>проверка , существует ли в БД шлюза (objects) объект с такими src_client_id, ObjectType и ClientObjectID [check object exists]</li>
    <li>обновление или добавление объекта в БД шлюза [update object] [add object].</li>
  </ul>
</li>
<li>Занесение объекта в очередь (queue) для каждого приемника [queue object], запуск  process_cient3.cfg, если посылка в приемник идет через БД (METHOD=3, для 1С) </li>
<li>Ответ клиенту-источнику [report]. Если в шагах 2-5 была ошибка – command.cfg[ERROR]</li>

</ol>

<b>Монитор очереди рассылки</b><br>


Tread стартуется из jinr.gateway.Servlet.doGet(), если не стартован или не живой
Метод Run() берет параметр MonitorInterval (def. 5000 – 5 сек.). Монитор спит этот интервал, затем:
<ol>
<li>Проверяет, есть ли данные, обновленные со времени прошлого «просыпания» + MonitorInterval. Т.е., при непрерывной загрузке данных ждем не менее 5 сек. после завершения загрузки (Monitor.isDataUpdated() ). Если есть данные для рассылки, то сбрасывает время обновления (rm_Global.getString("dataUpdateTime") и вызывает Monitor.processData()</li> 
<li>Для старта рассылки данных (Monitor.processData() ) проверяет коннект к БД, коннектится, если коннекта нет или он не живой и вызывает модуль process_queue.cfg.</li>
</ol>
[end]


[parameters]
request_name=S:Прием объекта, запись в вых. очередь
service=jinr.gateway.ServiceReceiveDoc
tableCfg=table_no
LOG=ON
[end]


[preSQLs]
$SET_PARAMETERS ResultCode=; ERROR=; 
[end]

===== Сохраняем объект в базу шлюза ===== ??
[process object]
$SET_PARAMETERS ClientObjectID=#SrcObjectID#  ??SrcObjectID&!ClientObjectID
$SET_PARAMETERS ERROR=Отсутствует параметр ClientObjectID; ResultCode=1; ??!ClientObjectID
$SET_PARAMETERS ERROR=Отсутствует параметр ObjectType; ResultCode=1; ??!ObjectType
$SET_PARAMETERS ERROR=Отсутствует параметр Object; ResultCode=1; ??!Object

$INCLUDE [checkObjectContent] 

$GET_DATA [check object exists]  ??!ERROR&!IGNORED
$GET_DATA [update object]   ??GW_ID>0&!ERROR&!IGNORED
$GET_DATA [add object]  ??!GW_ID>0&!ERROR&!IGNORED

$CALL_SERVICE c=put_object_to_queue; ??!ERROR&!IGNORED
[end]


[checkObjectContent] ****** Проверка содержания группы объектов объекта
$INCLUDE put_object.cfg[doCheckObjectContent]   ??!ERROR&ObjectType=7|ObjectType=8
[end]


[doCheckObjectContent] ****** Проверка содержания объекта
$SET_PARAMETERS MSG=отсутствует ПодразделениеКод;  ??ObjectType=7&!ПодразделениеКод
$SET_PARAMETERS MSG=отсутствует ТабельныйНомер #MSG#;  ??ObjectType=7&!ТабельныйНомер
$SET_PARAMETERS MSG=отсутствует СуммаДокумента #MSG#; ??ObjectType=24&!СуммаДокумента
$SET_PARAMETERS Result=Объект игнорирован: #MSG#; IGNORED=Y; ??MSG
[end]



===== Посылаем ответ источнику ===== ??
[report]
$SET_PARAMETERS Result=OK; ??!Result
{"ResultCode":"0", "Result":"#Result#", "GateObjectID":"#GW_ID#" } ??!ERROR
$LOG1 <b>=== RESPONCE to source: {"ResultCode":"0", "Result":"#Result#", "GateObjectID":"#GW_ID#" }</b><br> ??!ERROR
[end]

=====================================================================================
=====================================================================================

[check object exists]
select id as "GW_ID"
from objects
where src_client_id=#ClientID# and ObjectType=#ObjectType# and id_client_#ClientID#='#ClientObjectID#'
[end]


[add object]
insert into objects (ver, src_client_id, Command, ObjectType, ObjectTime, Object, uploaded, ClientIP, id_client_#ClientID#)
values (#Ver#, #ClientID#, '#Command#', #ObjectType#
,STR_TO_DATE('#Time#', '%d.%m.%Y %H:%i:%S')
, '#Object#', now(), '#ClientIP#', '#ClientObjectID#')
;
select LAST_INSERT_ID() as "GW_ID"
[end]


[update object]
update objects set ver=#Ver#
, src_client_id=#ClientID#
, Command='#Command#'
, ObjectType=#ObjectType#
, id_client_#ClientID#='#ClientObjectID#'
, ObjectTime=STR_TO_DATE('#Time#', '%d.%m.%Y %H:%i:%S')
, Object='#Object#'
, uploaded=now()
, is_deleted=0
, ClientIP='#ClientIP#'
where id=#GW_ID#
[end]


ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ
ПЕРЕНЕСЕНО в put_object_to_queue.cfg
=====================================================================================
========================== Добавляем  объект в очередь ==============================
========================== Выставляем время обновления данных в очереди==============
=====================================================================================

[ZZZqueue object]
$LOG1 <hr> PUT TO QUEUE ==> RECEIVERS=#RECEIVERS#;<br>
$EXECUTE_LOOP RECEIVER_ID; #RECEIVERS#; put_object.cfg[queue to client]
$SET_PARAMETERS_GLOBAL dataUpdateTime=#tm#;
[end]

[ZZZqueue to client]
$LOG2 ======> RECEIVER_ID=#RECEIVER_ID#;<br>
------- добавляем  объект в очередь для одного приемника ----- ??
$GET_DATA put_object.cfg[check queue] 
$GET_DATA put_object.cfg[add to queue] ??!QUEUE_ID
$GET_DATA put_object.cfg[update queue] ??QUEUE_ID
------- заносим объект в БД приемника, если обмен через БД ----- ??
$SET_PARAMETERS method_param=method_#RECEIVER_ID#;
$SET_PARAMETERS METHOD=^#method_param#;
$CALL_SERVICE c=process_client3; ??METHOD=3
[end]

=====================================================================================
[ZZZcheck queue]
select id as QUEUE_ID from queue where global_id=#GW_ID# and receiver_id=#RECEIVER_ID# and resultCode is null
[end]


[ZZZadd to queue]
select id_client_#RECEIVER_ID# as DestObjectID from objects where id=#GW_ID#
;
insert into queue (ver, src_client_id, object_type, command, global_id, object_time, uploaded
, src_object_id, dest_object_id
 , object, receiver_id)
values (#Ver#, #ClientID#, #ObjectType#, '#Command#', #GW_ID#, STR_TO_DATE('#Time#', '%d.%m.%Y %H:%i:%S'), now()
, '#ClientObjectID#', '#DestObjectID#'
, '#Object#'
, '#RECEIVER_ID#')
[end]

[ZZZupdate queue]
update queue set ver=#Ver#, command='#Command#'
, src_client_id, object_type, global_id #ClientID#, #ObjectType#, , #GW_ID# ??
, object_time=STR_TO_DATE('#Time#', '%d.%m.%Y %H:%i:%S'), uploaded=now()
, src_object_id='#ClientObjectID#', dest_object_id='#DestObjectID#'
 , object='#Object#', sent=null, resultCode=null, result=''
where id=#QUEUE_ID#
[end]
