[parameters]
title=Валюта
debug=off
$INCLUDE common.dat[colors]
[end]


[report]
$INCLUDE common.dat[head]
 <Style>
   A:Link{ Color: #000000; Text-decoration: underline}
   A:Visited{ Color: #000000; Text-decoration: underline}
   A:Hover{ Color: #000000; Text-decoration: none}
 td, body {font-family: verdana, arial, helvetica; font-size:11px;}  
 input.button1 {width: 40px; font-weight: bold;}
 input.longbutton {width: 124px; font-weight: bold;}
 input.readout {text-align: right;}
 </Style>
<body topmargin="0" leftmargin="0">
<center>

<!-- BODY START HERE -->

<FORM name="Keypad" action="">
<TABLE border=0 width=50 height=60 cellpadding=0 cellspacing=0>
<TR>
<TD colspan=3 align=middle>
<input name="ReadOut" type="Text" size=15 value="0" width=100% class="readout">
</TD>
<TD>&nbsp;
</TD>
<TD>
<input name="btnClear" type="Button" value="C" onclick="Clear()" class="button1">
</TD>
<TD><input name="btnClearEntry" type="Button" value="CE" onclick="ClearEntry()"  class="button1">
</TD>
</TR>
<TR>
<TD>
<input name="btnSeven" type="Button" value="7" onclick="NumPressed(7)" class="button1">
</TD>
<TD>
<input name="btnEight" type="Button" value="8" onclick="NumPressed(8)" class="button1">
</TD>
<TD>
<input name="btnNine" type="Button" value="9" onclick="NumPressed(9)" class="button1">
</TD>
<TD>
</TD>
<TD>
<input name="btnNeg" type="Button" value="+/-" onclick="Neg()" class="button1">
</TD>
<TD>
<input name="btnPercent" type="Button" value="%" onclick="Percent()" class="button1">
</TD>
</TR>
<TR>
<TD>
<input name="btnFour" type="Button" value="4" onclick="NumPressed(4)" class="button1">
</TD>
<TD>
<input name="btnFive" type="Button" value="5" onclick="NumPressed(5)" class="button1">
</TD>
<TD>
<input name="btnSix" type="Button" value="6" onclick="NumPressed(6)" class="button1">
</TD>
<TD>
&nbsp;
</TD>
<TD align=middle>
<input name="btnPlus" type="Button" value="+" onclick="Operation('+')" class="button1">
</TD>
<TD align=middle>
<input name="btnMinus" type="Button" value="-" onclick="Operation('-')" class="button1">
</TD>
</TR>
<TR>
<TD>
<input name="btnOne" type="Button" value="1" onclick="NumPressed(1)" class="button1">
</TD>
<TD>
<input name="btnTwo" type="Button" value="2" onclick="NumPressed(2)" class="button1">
</TD>
<TD>
<input name="btnThree" type="Button" value="3" onclick="NumPressed(3)" class="button1">
</TD>
<TD>
&nbsp;
</TD>
<TD align=middle>
<input name="btnMultiply" type="Button" value="*" onclick="Operation('*')" class="button1">
</TD>
<TD align=middle>
<input name="btnDivide" type="Button" value="/" onclick="Operation('/')" class="button1">
</TD>
</TR>
<TR>
<TD>
<input name="btnZero" type="Button" value="0" onclick="NumPressed(0)" class="button1">
</TD>
<TD>
<input name="btnDecimal" type="Button" value="." onclick="Decimal()" class="button1">
</TD>
<TD colspan=4>
<input name="btnEquals" type="Button" value="=" onclick="Operation('=')" class="longbutton">
</TD>
</TR>
<tr>
<td align=right colspan=6>
<input type="button" onclick="ok();" value="Вставить" class="longbutton">
</td>
</tr>
</TABLE>
</FORM>
</CENTER>
<font face="Verdana, Arial, Helvetica" size=2>
<SCRIPT LANGUAGE="JavaScript">

var FKeyPad = document.Keypad;
var Accum = 0;
var FlagNewNum = false;
var PendingOp = "";
function NumPressed (Num) {
if (FlagNewNum) {
FKeyPad.ReadOut.value  = Num;
FlagNewNum = false;
   }
else {
if (FKeyPad.ReadOut.value == "0")
FKeyPad.ReadOut.value = Num;
else
FKeyPad.ReadOut.value += Num;
   }
}
function Operation (Op) {
var Readout = FKeyPad.ReadOut.value;
if (FlagNewNum && PendingOp != "=");
else
{
FlagNewNum = true;
if ( '+' == PendingOp )
Accum += parseFloat(Readout);
else if ( '-' == PendingOp )
Accum -= parseFloat(Readout);
else if ( '/' == PendingOp )
Accum /= parseFloat(Readout);
else if ( '*' == PendingOp )
Accum *= parseFloat(Readout);
else
Accum = parseFloat(Readout);
if ((Op=='=') || (Op=='%')){
FKeyPad.ReadOut.value = formatNumber(Accum,2);
}
else{
FKeyPad.ReadOut.value = Accum;
}
PendingOp = Op;
   }
}
function Decimal () {
var curReadOut = FKeyPad.ReadOut.value;
if (FlagNewNum) {
curReadOut = "0.";
FlagNewNum = false;
   }
else
{
if (curReadOut.indexOf(".") == -1)
curReadOut += ".";
   }
FKeyPad.ReadOut.value = curReadOut;
}
function ClearEntry () {
FKeyPad.ReadOut.value = "0";
FlagNewNum = true;
}
function Clear () {
Accum = 0;
PendingOp = "";
ClearEntry();
}
function Neg () {
FKeyPad.ReadOut.value = parseFloat(FKeyPad.ReadOut.value) * -1;
}
function Percent () {
FKeyPad.ReadOut.value = (parseFloat(FKeyPad.ReadOut.value) / 100) * parseFloat(Accum);
}
function ok(){
 try {
		window.opener.getFromCalc(FKeyPad.ReadOut.value,'#nm#');
		window.opener.#fRefr# ??fRefr
		window.close();
    }
 catch(e) {

    }
}

function formatNumber (num, decplaces) {
    // convert in case it arrives as a string value
    num = parseFloat(num);
    // make sure it passes conversion
    if (!isNaN(num)) {
        // multiply value by 10 to the decplaces power;
        // round the result to the nearest integer;
        // convert the result to a string
        var str = "" + Math.round (eval(num) * Math.pow(10,decplaces));
        // exponent means value is too big or small for this routine
        if (str.indexOf("e") != -1) {
            return "Out of Range";
        }
        // if needed for small values, pad zeros
        // to the left of the number
        while (str.length <= decplaces) {
            str = "0" + str;
        }
        // calculate decimal point position
        var decpoint = str.length - decplaces;
        // assemble final result from: (a) the string up to the position of
        // the decimal point; (b) the decimal point; and (c) the balance
        // of the string. Return finished product.
        return str.substring(0,decpoint) + "." + str.substring(decpoint,str.length);
    } else {
        return "NaN";
    }
}




FKeyPad.ReadOut.value='#iValue#'; ??iValue
Operation('=');                  ??iValue






</SCRIPT>



<!-- BODY END HERE -->



</body>
</html>
[end]
