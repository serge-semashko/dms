[parameters]
service=cern.kpi.viewdb.RecompileService
debug=off
#KeepLog=true
[end]

[results]
SELECT rownum||': '||lower(object_type)||' '||OBJECT_NAME||'<br>' as INVALID_OBJECTS 
FROM user_objects
WHERE status='INVALID';
[end]


[report]
<html>
<HEAD>
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
  <LINK href="#imgPath#main.css" rel=stylesheet type=text/css>
  <meta http-equiv="pragma" content="no-cache"> 
  <meta http-equiv="cache-control" content="no-cache"> 
  <meta http-equiv="expires" content="0">
</head>
<body class=svs style="margin:0">
<input type=hidden name="orauser" value="#orauser#"></form>

<table><tr><td class=label><b>Re-compilation finished!<br>Invalid objects after recompilation:</b>
<blockquote style="margin:20;">

$GET_DATA [results]
#INVALID_OBJECTS#
NONE  ??!INVALID_OBJECTS
</blockquote>
</td></tr></table>
</body></html>
[end]
<p>bla-bla
<p>bla-bla
<p>bla-bla


[exec proc]
{call recompile_all_objects}
DROP PROCEDURE recompile_all_objects
[end]

[create proc]
CREATE OR REPLACE PROCEDURE recompile_all_objects IS
-- Compiles all objects under the current schema by executing this
-- procedure once.
-- The schema creating this procedure must be granted SELECT privilege
-- directly to the USER_OBJECTS view (not through a role).
   CURSOR cur_objects_invalid IS 
      SELECT object_id, object_name, object_type
      FROM   user_objects
      WHERE  status      = 'INVALID'
      AND    object_type IN ('PACKAGE', 'PACKAGE BODY',
                             'FUNCTION', 'PROCEDURE', 'TRIGGER', 'VIEW')
      ORDER BY object_type, object_name;

   CURSOR cur_objects_valid (p_object_id_num NUMBER) IS
      SELECT 'FOUND'
      FROM   user_objects
      WHERE  STATUS      = 'VALID'
      AND    object_id   = p_object_id_num;

   TYPE lv_invalid_tab IS TABLE OF cur_objects_invalid%ROWTYPE
      INDEX BY BINARY_INTEGER;
   lv_invalid_tab_rec     lv_invalid_tab;
   lv_count_compiled_num  PLS_INTEGER; -- compiled counter
   lv_column_valid_txt    VARCHAR2(5);
   lv_exec_cursor_num     PLS_INTEGER := DBMS_SQL.OPEN_CURSOR;
   lv_sql_statement_txt   VARCHAR2(200);
   lv_object_count_num    PLS_INTEGER := 0; -- VALID counter
BEGIN
   LOOP
      -- set to 0 to determine if any program units compiled this loop
      lv_count_compiled_num := 0; 
      FOR cur_objects_invalid_rec IN cur_objects_invalid LOOP
         IF NOT lv_invalid_tab_rec.
            EXISTS(cur_objects_invalid_rec.object_id) THEN
            IF cur_objects_invalid_rec.object_type =
               'PACKAGE BODY' THEN
               lv_sql_statement_txt := 'ALTER PACKAGE ' ||
                  cur_objects_invalid_rec.object_name ||
                  ' COMPILE BODY';
            ELSE
               lv_sql_statement_txt := 'ALTER ' ||
                  cur_objects_invalid_rec.object_type ||
                  ' ' || cur_objects_invalid_rec.object_name ||
                  ' COMPILE';
            END IF;
            BEGIN
               lv_object_count_num := lv_object_count_num + 1;
               DBMS_SQL.PARSE(lv_exec_cursor_num, 
                  lv_sql_statement_txt, DBMS_SQL.NATIVE);
            EXCEPTION
               WHEN OTHERS THEN
                  NULL;
            END;
            -- If object VALID, compile successful, otherwise failed.
            OPEN cur_objects_valid(cur_objects_invalid_rec.object_id);
            FETCH cur_objects_valid INTO lv_column_valid_txt;
            IF CUR_OBJECTS_VALID%ROWCOUNT > 0 THEN
               lv_count_compiled_num := lv_count_compiled_num + 1;
               CLOSE cur_objects_valid;
               EXIT;
            ELSE
               lv_invalid_tab_rec(cur_objects_invalid_rec.object_id).
                  object_name := cur_objects_invalid_rec.object_name;
               lv_invalid_tab_rec(cur_objects_invalid_rec.object_id).
                  object_type := cur_objects_invalid_rec.object_type;
               CLOSE cur_objects_valid;
            END IF;
         END IF;
      END LOOP;
      IF lv_count_compiled_num = 0 THEN
         EXIT;
      END IF;
   END LOOP;
   DBMS_SQL.CLOSE_CURSOR(lv_exec_cursor_num);
EXCEPTION
   WHEN OTHERS THEN
      -- Closes any cursor left open upon an error
      IF DBMS_SQL.IS_OPEN(lv_exec_cursor_num) THEN
         DBMS_SQL.CLOSE_CURSOR(lv_exec_cursor_num);
      END IF;
      IF cur_objects_valid%ISOPEN THEN
         CLOSE cur_objects_valid;
      END IF;
END recompile_all_objects;
[end]
