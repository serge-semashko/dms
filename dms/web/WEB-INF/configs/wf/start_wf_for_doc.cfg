[comments]
descr=S: Создать и стартовать рабочее workflow для документа. Корневой шаблон. Удаляет старые WF документа, если они есть.

input=doc_id - ID документа
output=Копирование шаблона из wf_templates в wf, заполнение полей на основе данных документа (атрибуты, персоны на этапах)
parents=docs/doc_edit.cfg
childs=wf/set_wf_params
testURL=?c=wf/start_wf_for_doc&doc_id=1
author=Куняев
[end]

[parameters]
request_name=S:создание wf для документа #doc_id#
KeepLog=false
ClearLog=true
[end]


[report]
--- получить данные залогиненного пользователя ---- ??
$CALL_SERVICE c=svs/get_user_info; requested_user_id=#USER_ID#
$GET_DATA [get doc info]
======= начало транзакции для всего этого запроса (создание рабочего workflow) ======??
$LOG <hr>
$GET_DATA [start transaction] 
$GET_DATA [delete existing wf] ??OLD_WF_ID&!ERROR
$GET_DATA [copy wf template]  ??!ERROR
$GET_DATA [set history] ??!ERROR

$CALL_SERVICE c=wf/set_wf_params ??!ERROR
$CALL_SERVICE c=wf/notify_admins ??!ERROR

<hr>OK! Workflow for doc #doc_id# created.  ??!ERROR

$CALL_SERVICE c=wf/start_wf_step;  ??!ERROR
$GET_DATA [commit]
$LOG <hr>
<script>
window.parent.jAlert('Документ запущен на согласование.','OK'); ??!ERROR
window.parent.loadFrame('c=#returnToModule#');  ??returnToModule&!ERROR
window.parent.jAlert('#ERROR#','ОШИБКА!'); ??ERROR
</script>
[end]


==============================================================
==============================================================
==============================================================
[commit]
COMMIT;   ??!ERROR
$INCLUDE [do rollback] ??ERROR
unlock tables;
[end]

[do rollback]
ROLLBACK; 
select max(id)+1 as NEXT_ID from wf_list;
ALTER TABLE wf_list AUTO_INCREMENT = #NEXT_ID#;
select max(id)+1 as NEXT_ID from wf;
ALTER TABLE wf AUTO_INCREMENT = #NEXT_ID#;
select max(id)+1 as NEXT_ID from wf_history;
ALTER TABLE wf_history AUTO_INCREMENT = #NEXT_ID#;
[end]

[get doc info]
select type_id as "DOC_TYPE_ID", comment from d_list where id=#doc_id#
;
select id as "OLD_WF_ID" from wf_list where doc_id=#doc_id#
;
[end]

[start transaction]
lock tables wf_list write, wf write, wf_history write, wf_events write, wf_events_notifications write;
START TRANSACTION;
[end]

[delete existing wf]
delete /* delete workflow */ from wf where wf_id in (select id from wf_list where doc_id=#doc_id#)
;
delete /* delete workflow from wf_list */ from wf_list where doc_id=#doc_id#
;
insert /* register delete OLD WF in history */ into wf_history (wf_id, doc_id, user_id, user_fio, user_posts, user_role, step, result, processed, client_ip, login_id)
values (#OLD_WF_ID#, #doc_id#, #USER_ID#, '#u_FIO#', '#u_posts#', '#u_roles#', 0, 'Workflow удалена', now(), '#ClientIP#', '#USER_ID#')
;
[end]


[copy wf template]
select /* get wf template id */ id as "WF_TEMPLATE_ID" from wf_templates_list 
where doc_type_id=#DOC_TYPE_ID# and is_active=1 
order by modified desc limit 1
;
insert into wf_list /* add workflow to wf_list */ (template_id, doc_id, curr_step, is_active, modified, modifier_id)
values(#WF_TEMPLATE_ID#, #doc_id#, 0, 1, now(), 0)
;
select LAST_INSERT_ID() as "WF_ID"
;
insert into wf /* add fist record to working workflow */ 
(wf_id, step, role_id, user_id, result_code, result, comment, started, finished, modified, modifier_id)
values(#WF_ID#,0,0, #USER_ID#, 1, 'Создан документ', '#comment#', now(), now(), now(), #USER_ID#)
;
insert into wf /* copy wf template into working wf */ (wf_id, step, role_id, role_target_type_id, modified, modifier_id)
select #WF_ID#, step, role_id, role_target_type_id, now(), 0 
from wf_templates
where wf_template_id=#WF_TEMPLATE_ID#
order by step
;
[end]


[set history]
insert into wf_history /* register step in WF history */ (dat, wf_id, doc_id, role_id, user_id, user_fio, user_posts, user_role, step, result, processed, client_ip, login_id)
values (now(), #WF_ID#, #doc_id#, 0, #USER_ID#, '#u_FIO#', '#u_posts#', '#u_roles#', 0, 'Создана Workflow', now(), '#ClientIP#', '#USER_ID#')
[end]
