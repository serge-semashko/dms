[comments]
descr=S: Отослать отклонённый документ инициатору.

input=doc_id - ID документа
output=Добавляется и активируется шаг workflow => инициатору, посылается уведомление
parents=wf/user_action
childs=wf/send_notif_mail.cfg
testURL=?c=wf/send_to_initiator&doc_id=1
call=$CALL_SERVICE c=wf/send_to_initiator; doc_id=...;
author=Куняев
[end]

[parameters]
request_name=S:возврат док.#doc_id# инициатору
KeepLog=false
ClearLog=true
[end]


[report]
$GET_DATA [get wf data]
$GET_DATA [add initiator step]
$LOG Отсылка документа инициатору #doc_id#=#doc_id#; doc_type_id=#doc_type_id#; STEP_ID=#STEP_ID#;

$GET_DATA [set history] ??!ERROR
$GET_DATA [create event] ??!ERROR&WF_HISTORY_ID
$CALL_SERVICE c=wf/send_notif_mail; event_type=0; ??!ERROR

$LOG <b>ERROR:</b> #ERROR# ??ERROR
[end]

==============================================================
==============================================================
==============================================================

[get wf data]
select /* ID workflow */ id as "WF_ID" from wf_list where doc_id=#doc_id#
;
select /* номер след.шага */ max(step)+1 as "NEXT_STEP" from wf where wf_id=#WF_ID#
;
select /* ID инициатора */ creator_id from d_list where id=#doc_id#
;
[end]

[add initiator step]
update wf_list set curr_step=#NEXT_STEP#, is_active=0, modified=now(), modifier_id=#USER_ID#
where doc_id=#doc_id# 
;
insert into wf(wf_id, step, role_id, user_id, started, modified, modifier_id)
values(#wf_id#, #NEXT_STEP#, 0, #creator_id#, now(), now(), #USER_ID#)
;
select LAST_INSERT_ID() as "STEP_ID"
;
[end]


[set history]
insert into wf_history (dat, wf_id, doc_id, step_id, step
, role_id, user_id, user_fio, user_posts, user_role, user_email
, result, comment)

values (now(), #WF_ID#, #doc_id#, #STEP_ID#, #NEXT_STEP#
---- Заносим данные ЗАЛОГИНЕНОГО юзера - не из workflow! ??
, 0, #USER_ID#, '#u_FIO#', '#u_posts#', '#u_roles#', '#email#'
, 'Возврат инициатору', 'Документ отклонён')
;
select LAST_INSERT_ID() as "WF_HISTORY_ID"
;
[end]



[create event]
insert into wf_events (doc_id, wf_step_id, wf_history_id, event_type, event_date, processed, notify_user_id)
values (#doc_id#, #STEP_ID#, #WF_HISTORY_ID#, null, now(), null, #creator_id#)
;
select LAST_INSERT_ID() as "event_id"
;
update wf set started=now() where id=#STEP_ID#
;
update wf_list set curr_step=#NEXT_STEP# where id=#WF_ID#
;
[end]
